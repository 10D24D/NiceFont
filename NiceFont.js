// ==UserScript==
// @name         NiceFont
// @name:zh-CN         NiceFontÔºàËÄêËßÜÂ≠ó‰ΩìÔºâ
// @name:zh-TW         NiceFontÔºàËÄêË¶ñÂ≠óÈ´îÔºâ
// @name:en            NiceFont
// @name:ko            Ï¢ãÏùÄ Í∏ÄÍº¥ÔºàNiceFontÔºâ
// @name:ja            „ÅÑ„ÅÑ„Éï„Ç©„É≥„ÉàÔºàNiceFontÔºâ
// @namespace    https://github.com/10D24D/NiceFont/
// @version      1.2
// @description  NiceFont ‰∏ªÊâìËÆ©Â≠ó‰ΩìÊõ¥‚ÄúËÄêËßÜ‚ÄùÂ•ΩÁúã„ÄÇÊîØÊåÅÊâãÂä®„ÄÅÂÆöÊó∂„ÄÅÂä®ÊÄÅÁöÑË∞ÉÊï¥ÊØè‰∏™ÁΩëÈ°µÁöÑÂ≠ó‰ΩìÊ†∑ÂºèÔºåÂåÖÊã¨Â≠ó‰ΩìÂ§ßÂ∞è„ÄÅÂ≠ó‰ΩìÁ±ªÂûãÔºåÂπ∂‰∏îËÆ∞‰ΩèÂÆÉ‰ª¨ÔºÅ
// @description:en NiceFont focuses on making fonts more "durable" and good-looking. Support manual, timed and dynamic adjustment of the font style of each web page, including font size and font type, and remember them!
// @description:zh-CN NiceFont ‰∏ªÊâìËÆ©Â≠ó‰ΩìÊõ¥‚ÄúËÄêËßÜ‚ÄùÂ•ΩÁúã„ÄÇÊîØÊåÅÊâãÂä®„ÄÅÂÆöÊó∂„ÄÅÂä®ÊÄÅÁöÑË∞ÉÊï¥ÊØè‰∏™ÁΩëÈ°µÁöÑÂ≠ó‰ΩìÊ†∑ÂºèÔºåÂåÖÊã¨Â≠ó‰ΩìÂ§ßÂ∞è„ÄÅÂ≠ó‰ΩìÁ±ªÂûãÔºåÂπ∂‰∏îËÆ∞‰ΩèÂÆÉ‰ª¨ÔºÅ
// @description:zh-TW NiceFont ‰∏ªÊâìËÆìÂ≠óÈ´îÊõ¥‚ÄúËÄêË¶ñ‚ÄùÂ•ΩÁúã„ÄÇÊîØÊåÅÊâãÂãï„ÄÅÂÆöÊôÇ„ÄÅÂãïÊÖãÁöÑË™øÊï¥ÊØèÂÄãÁ∂≤È†ÅÁöÑÂ≠óÈ´îÊ®£ÂºèÔºåÂåÖÊã¨Â≠óÈ´îÂ§ßÂ∞è„ÄÅÂ≠óÈ´îÈ°ûÂûãÔºå‰∏¶‰∏îË®ò‰ΩèÂÆÉÂÄëÔºÅ
// @description:ko NiceFontÎäî Ïõπ ÌéòÏù¥ÏßÄÏóêÏÑú Í∏ÄÍº¥ÏùÑ "ÎÇ¥Íµ¨ÏÑ±Ïù¥ Ï¢ãÍ≥† Î≥¥Í∏∞ Ï¢ãÍ≤å" ÎßåÎì§Ïñ¥ Ï£ºÎäî Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. ÏàòÎèô, ÌÉÄÏù¥Î®∏, ÎèôÏ†Å Î∞©ÏãùÏúºÎ°ú Í∞Å Ïõπ ÌéòÏù¥ÏßÄÏùò Í∏ÄÍº¥ Ïä§ÌÉÄÏùºÏùÑ Ï°∞Ï†ïÌï† Ïàò ÏûàÏúºÎ©∞, Í∏ÄÍº¥ ÌÅ¨Í∏∞ Î∞è Ï¢ÖÎ•òÎ•º Í∏∞ÏñµÌï©ÎãàÎã§!
// @description:ja NiceFont„ÅØ„ÄÅ„Ç¶„Çß„Éñ„Éö„Éº„Ç∏„ÅÆ„Éï„Ç©„É≥„Éà„Çí„ÄåËÄê‰πÖÊÄß„Åå„ÅÇ„Çä„ÄÅÁæé„Åó„Åè„Äç„Åô„Çã„Åì„Å®„ÇíÁõÆÊåá„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÊâãÂãï„ÄÅ„Çø„Ç§„Éû„Éº„ÄÅÂãïÁöÑ„Å´ÂêÑ„Ç¶„Çß„Éñ„Éö„Éº„Ç∏„ÅÆ„Éï„Ç©„É≥„Éà„Çπ„Çø„Ç§„É´„ÇíË™øÊï¥„Åß„Åç„ÄÅ„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫„ÇÑ„Éï„Ç©„É≥„Éà„Çø„Ç§„Éó„ÇÇË®òÊÜ∂„Åï„Çå„Åæ„ÅôÔºÅ
// @author       DD1024z
// @match        *://*/*
// @icon         https://raw.githubusercontent.com/10D24D/NiceFont/main/static/logo.png
// @license      Apache License 2.0
// @grant        GM_registerMenuCommand
// @grant        GM_unregisterMenuCommand
// @grant        GM_getValue
// @grant        GM_setValue
// @downloadURL https://update.greasyfork.org/scripts/533232/NiceFont.user.js
// @updateURL https://update.greasyfork.org/scripts/533232/NiceFont.meta.js
// ==/UserScript==

(function () {
    'use strict';

    if (window.top !== window.self) return; // ‰∏çÂú®È°∂Â±ÇÈ°µÈù¢Êó∂Áõ¥Êé•ÈÄÄÂá∫ËÑöÊú¨

    const STORAGE_KEY = 'NiceFont_config'; // Â≠òÂÇ®Â≠ó‰ΩìÂ§ßÂ∞èÂíåÂ≠ó‰ΩìÁ±ªÂûãÈÖçÁΩÆÁöÑÈîÆ

    let fontIncrement = GM_getValue('font_increment', 1); // Â≠ó‰ΩìÂ¢ûÂ§ßÊàñÂáèÂ∞èÁöÑÊ≠•ÈïøÔºåÈªòËÆ§ÂÄº‰∏∫ 1px

    const LANGUAGE = GM_getValue('language', 'en'); // Ëé∑ÂèñÁî®Êà∑ÁöÑËØ≠Ë®ÄËÆæÁΩÆÔºåÈªòËÆ§ËØ≠Ë®ÄÊòØËã±Êñá
    let currentLanguage = LANGUAGE; // ÂΩìÂâçËØ≠Ë®Ä

    // Ëé∑ÂèñÂ≠ó‰ΩìÁ±ªÂûãÈÖçÁΩÆÔºåÁõ¥Êé•‰ªéconfig‰∏≠Ëé∑ÂèñfontFamily
    let config = JSON.parse(localStorage.getItem(STORAGE_KEY) || '{}');
    let currentFontFamily = config.fontFamily || 'none'; // ‰ªé config Ëé∑ÂèñÂ≠ó‰ΩìÁ±ªÂûãÔºåÈªòËÆ§ none

    // Â§öËØ≠Ë®ÄÊñáÊú¨ÔºåÊîØÊåÅËã±ÊñáÂíåÁÆÄ‰Ωì‰∏≠Êñá
    const translations = {
        en: {
            fontSizeAdjustment: "Font Size Adjustment: ",
            setFontIncrement: "Set Font Increment: ",
            increase: "Increase Font Size",
            decrease: "Decrease Font Size",
            reset: "Reset Font",
            reapply: "Reapply Font Changes",
            toggleWatch: "Toggle Dynamic Font Adjustment",
            toggleTimer: "Toggle Timer-based Font Adjustment",
            dynamicAdjustmentEnabled: "Dynamic Font Adjustment: Enabled",
            dynamicAdjustmentDisabled: "Dynamic Font Adjustment: Disabled",
            timerAdjustmentEnabled: "Timer-based Font Adjustment: Enabled",
            timerAdjustmentDisabled: "Timer-based Font Adjustment: Disabled",
            usageLanguage: "Menu Language: English„Äê‚àö„Äë/ ÁÆÄ‰Ωì‰∏≠Êñá",
            dynamicWatchConfirm: "Switch the function of dynamically adjusting the font and refresh the page immediately? After being enabled, the font will be dynamically adjusted when there is new content on the page.\n\nNote: After enabling this function, there will be lag when browsing complex pages!",
            timerPrompt: "Switch the function of adjusting the font at regular intervals and refresh the page immediately?\nPlease enter the interval time for applying font changes at regular intervals (unit: seconds. Enter 0 to close). ",
            switchLanguageConfirm: "Are you sure you want to switch to Simplified Chinese?",
            setFontIncrementPrompt: "Enter font increment (default is 1px):",
            setFontIncrementErrorAlert: "Invalid increment value. Please enter a positive number.",
            setFontFamily: "Set Font Family: ",
            setFontFamilyPrompt: "Enter the font family (default is none):",
            supportFontFamily: "Supported fonts:",
            invalidFontFamilyAlert: "The font you entered is not supported. Please choose a valid one.",
            applyFontFamilyConfirm: 'Would you like this font setting to take effect on all pages or only on the current page?\n "Ok" is applied to all pages, and "Cancel" is only applied to the current page.',
        },
        zh: {
            fontSizeAdjustment: "Â≠ó‰ΩìÂ§ßÂ∞èË∞ÉÊï¥Ôºö",
            setFontIncrement: "ËÆæÁΩÆÂ≠ó‰ΩìÂ¢ûÈáèÔºö",
            increase: "ÊîæÂ§ßÂ≠ó‰Ωì",
            decrease: "Áº©Â∞èÂ≠ó‰Ωì",
            reset: "ÊÅ¢Â§çÂ≠ó‰Ωì",
            reapply: "Â∫îÁî®Â≠ó‰ΩìÂèòÂåñ",
            toggleWatch: "Âä®ÊÄÅË∞ÉÊï¥Â≠ó‰Ωì",
            toggleTimer: "ÂÆöÊó∂Ë∞ÉÊï¥Â≠ó‰Ωì",
            dynamicAdjustmentEnabled: "Âä®ÊÄÅË∞ÉÊï¥Â≠ó‰ΩìÔºöÂ∑≤ÂºÄÂêØ",
            dynamicAdjustmentDisabled: "Âä®ÊÄÅË∞ÉÊï¥Â≠ó‰ΩìÔºöÂ∑≤ÂÖ≥Èó≠",
            timerAdjustmentEnabled: "ÂÆöÊó∂Ë∞ÉÊï¥Â≠ó‰ΩìÔºöÂ∑≤ÂºÄÂêØ",
            timerAdjustmentDisabled: "ÂÆöÊó∂Ë∞ÉÊï¥Â≠ó‰ΩìÔºöÂ∑≤ÂÖ≥Èó≠",
            usageLanguage: "ËèúÂçïËØ≠Ë®ÄÔºöËã±Êñá / ÁÆÄ‰Ωì‰∏≠Êñá„Äê‚àö„Äë",
            dynamicWatchConfirm: "ÂàáÊç¢Âä®ÊÄÅË∞ÉÊï¥Â≠ó‰ΩìÁöÑÂäüËÉΩÂπ∂Á´ãÂç≥Âà∑Êñ∞È°µÈù¢Ôºü\nÂêØÁî®ÂêéÈ°µÈù¢ÊúâÊñ∞ÂÜÖÂÆπÂ∞ÜÂä®ÊÄÅË∞ÉÊï¥Â≠ó‰Ωì„ÄÇ\n\nÊ≥®ÊÑèÔºöÂêØÁî®ËØ•ÂäüËÉΩÂêéÂú®ÊµèËßàÂ§çÊùÇÈ°µÈù¢‰ºöÂ≠òÂú®Âç°È°øÁé∞Ë±°ÔºÅ",
            timerPrompt: "ÂàáÊç¢ÂÆöÊó∂Ë∞ÉÊï¥Â≠ó‰ΩìÁöÑÂäüËÉΩÂπ∂Á´ãÂç≥Âà∑Êñ∞È°µÈù¢Ôºü\nËØ∑ËæìÂÖ•ÂÆöÊó∂Â∫îÁî®Â≠ó‰ΩìÂèòÂåñÁöÑÈó¥ÈöîÊó∂Èó¥ÔºàÂçï‰ΩçÔºöÁßíÔºåËæìÂÖ•0ÂàôÂÖ≥Èó≠Ôºâ",
            switchLanguageConfirm: "Á°ÆÂÆöË¶ÅÂàáÊç¢Âà∞Ëã±ÊñáÂêóÔºü",
            setFontIncrementPrompt: "ËæìÂÖ•Â≠ó‰ΩìÂ¢ûÈáèÔºàÈªòËÆ§‰∏∫1pxÔºâÔºö",
            setFontIncrementErrorAlert: "Êó†ÊïàÁöÑÈÄíÂ¢ûÂÄºÔºåËØ∑ËæìÂÖ•‰∏Ä‰∏™Ê≠£Êï∞„ÄÇ",
            setFontFamily: "ËÆæÁΩÆÂ≠ó‰ΩìÁ±ªÂûãÔºö",
            setFontFamilyPrompt: "ËæìÂÖ•Â≠ó‰ΩìÁ±ªÂûãÔºàÈªòËÆ§‰∏∫noneÔºâÔºö",
            supportFontFamily: "ÊîØÊåÅÁöÑÂ≠ó‰ΩìÔºö",
            invalidFontFamilyAlert: "ÊÇ®ËæìÂÖ•ÁöÑÂ≠ó‰Ωì‰∏çÂèóÊîØÊåÅÔºåËØ∑ÈÄâÊã©‰∏Ä‰∏™ÊúâÊïàÁöÑÂ≠ó‰Ωì„ÄÇ",
            applyFontFamilyConfirm: "ÊÇ®Â∏åÊúõÊ≠§Â≠ó‰ΩìËÆæÁΩÆÂ∫îÁî®‰∫éÊâÄÊúâÈ°µÈù¢ËøòÊòØ‰ªÖÂΩìÂâçÈ°µÈù¢ÁîüÊïàÔºü\n‚ÄúÁ°ÆÂÆö‚ÄùÂ∫îÁî®Âà∞ÊâÄÊúâÈ°µÈù¢Ôºå‚ÄúÂèñÊ∂à‚Äù‰ªÖÂ∫îÁî®‰∫éÂΩìÂâçÈ°µÈù¢„ÄÇ",
        }
    };

    // Ëé∑ÂèñÂ≠ó‰ΩìË∞ÉÊï¥ÈÖçÁΩÆ
    let currentAdjustment = parseInt(config.resize || '0', 10);
    let watchDOMChanges = config.watcher === true;
    let intervalSeconds = parseInt(config.timer || '0', 10);

    let observer = null;
    let timer = null;
    let menuHandles = {}; // Áî®Êù•Â≠òÂÇ®Ê≤πÁå¥ËèúÂçïÈ°π
    const supportFonts = [
        'auto', 'Arial', 'cursive', 'emoji', 'fangsong', 'fantasy', 'math', 'monospace', 'none', 'sans-serif', 'serif',
        'system-ui', 'ui-monospace', 'ui-rounded', 'ui-sans-serif', 'ui-serif', '-webkit-body',
        'inherit', 'initial', 'revert', 'revert-layer', 'unset',
        'Verdana', 'Helvetica', 'Tahoma', 'Times New Roman', 'Georgia', 'Courier New', 'Comic Sans MS',
    ];

    // Êõ¥Êñ∞ËèúÂçïÂëΩ‰ª§
    updateMenuCommands();

    if (currentAdjustment !== 0 || LANGUAGE) {
        markDefaultFontSize(document.body);
        applyFontSizeRecursively(document.body, currentAdjustment);

        // ÂêØÁî®Âä®ÊÄÅË∞ÉÊï¥Â≠ó‰Ωì
        if (watchDOMChanges) {
            observer = new MutationObserver(() => {
                markDefaultFontSize(document.body);
                applyFontSizeRecursively(document.body, currentAdjustment);
                applyFontFamilyToPage(currentFontFamily);
            });
            observer.observe(document.body, { childList: true, subtree: true });
        } else if (intervalSeconds > 0) {
            // ÂêØÁî®ÂÆöÊó∂Ë∞ÉÊï¥Â≠ó‰Ωì
            timer = setInterval(() => {
                markDefaultFontSize(document.body);
                applyFontSizeRecursively(document.body, currentAdjustment);
                applyFontFamilyToPage(currentFontFamily);
            }, intervalSeconds * 1000);
        }
    }

    // ‰øùÂ≠òÂ≠ó‰ΩìË∞ÉÊï¥ÈÖçÁΩÆ
    function saveConfig() {
        localStorage.setItem(STORAGE_KEY, JSON.stringify({
            resize: currentAdjustment,
            watcher: watchDOMChanges,
            timer: intervalSeconds,
            fontFamily: currentFontFamily
        }));
    }

    // ‰øÆÊîπÂ≠ó‰ΩìÂ§ßÂ∞èÂπ∂‰øùÂ≠òÈÖçÁΩÆ„ÄÅÊõ¥Êñ∞ËèúÂçï
    function changeFontSize(increment) {
        currentAdjustment += increment;
        markDefaultFontSize(document.body);
        applyFontSizeRecursively(document.body, currentAdjustment);
        saveConfig();
        updateMenuCommands();
    }

    // Êõ¥Êñ∞Ê≤πÁå¥ËÑöÊú¨ËèúÂçï
    function updateMenuCommands() {
        // ÁßªÈô§ÊóßËèúÂçï
        Object.values(menuHandles).forEach(GM_unregisterMenuCommand);

        // Ê†πÊçÆÂΩìÂâçËØ≠Ë®ÄÈÄâÊã©ÁøªËØëÊñáÊú¨
        const t = translations[currentLanguage];

        // Â≠ó‰ΩìÂ§ßÂ∞èÊòæÁ§∫
        menuHandles.status = GM_registerMenuCommand(`üìè ${t.fontSizeAdjustment} ${currentAdjustment >= 0 ? '+' : ''}${currentAdjustment}px`, () => { });

        // ÊîæÂ§ßÂ≠ó‰Ωì
        menuHandles.increase = GM_registerMenuCommand(`üîº ${t.increase}`, () => changeFontSize(fontIncrement));

        // Áº©Â∞èÂ≠ó‰Ωì
        menuHandles.decrease = GM_registerMenuCommand(`üîΩ ${t.decrease}`, () => changeFontSize(-fontIncrement));

        // ÊÅ¢Â§çÈªòËÆ§Â≠ó‰ΩìÂ§ßÂ∞è
        menuHandles.reset = GM_registerMenuCommand(`üîÅ ${t.reset}`, () => {
            resetFontSize(document.body);
            currentAdjustment = 0;
            watchDOMChanges = false;
            intervalSeconds = 0;
            if (observer) observer.disconnect();
            if (timer) clearInterval(timer);
            currentFontFamily = 'none';
            saveConfig();
            applyFontFamilyToPage(currentFontFamily);
            updateMenuCommands();
        });

        // ÈáçÊñ∞Â∫îÁî®Â≠ó‰ΩìË∞ÉÊï¥
        menuHandles.reapply = GM_registerMenuCommand(`‚ôªÔ∏è ${t.reapply}`, () => {
            markDefaultFontSize(document.body);
            applyFontSizeRecursively(document.body, currentAdjustment);
        });

        // ËÆæÁΩÆÂ¢ûÈáèÂÄº
        menuHandles.setIncrement = GM_registerMenuCommand(`‚öôÔ∏è ${t.setFontIncrement} ${fontIncrement}px`, () => {
            const input = prompt(`${t.setFontIncrementPrompt}`, fontIncrement.toString());
            const newIncrement = parseInt(input, 10);
            if (!isNaN(newIncrement) && newIncrement > 0) {
                fontIncrement = newIncrement;
                GM_setValue('font_increment', fontIncrement);
                updateMenuCommands();
            } else {
                alert(`${t.setFontIncrementErrorAlert}`);
            }
        });

        // ËÆæÁΩÆÂ≠ó‰ΩìÁ±ªÂûã
        menuHandles.setFontFamily = GM_registerMenuCommand(`üñãÔ∏è ${t.setFontFamily} ${currentFontFamily}`, () => {
            let input;
            do {
                input = prompt(`${t.setFontFamilyPrompt}\n\n${t.supportFontFamily}\n${supportFonts.join(", ")}`, currentFontFamily);
                if (input && supportFonts.indexOf(input.trim()) === -1) {
                    alert(t.invalidFontFamilyAlert);
                }
            } while (input && supportFonts.indexOf(input.trim()) === -1);

            if (input && input.trim() !== "") {
                const applyToAllPages = confirm(`${t.applyFontFamilyConfirm}`);
                currentFontFamily = input.trim();
                if (applyToAllPages) {
                    GM_setValue('font_family', currentFontFamily);
                    document.body.style.fontFamily = currentFontFamily;
                }
                applyFontFamilyToPage(currentFontFamily);
                saveConfig();
                updateMenuCommands();
            }
        });

        // ÂàáÊç¢Âä®ÊÄÅË∞ÉÊï¥Â≠ó‰ΩìÂäüËÉΩ
        menuHandles.toggleWatch = GM_registerMenuCommand(`${watchDOMChanges ? 'üëÅÔ∏è ' + t.dynamicAdjustmentEnabled : 'üëÅÔ∏è ' + t.dynamicAdjustmentDisabled}`, () => {
            if (confirm(t.dynamicWatchConfirm)) {
                watchDOMChanges = !watchDOMChanges;
                if (watchDOMChanges) {
                    intervalSeconds = 0;
                    if (timer) clearInterval(timer);
                }
                saveConfig();
                updateMenuCommands();
                location.reload();
            }
        });

        // ÂàáÊç¢ÂÆöÊó∂Ë∞ÉÊï¥Â≠ó‰ΩìÂäüËÉΩ
        menuHandles.toggleTimer = GM_registerMenuCommand(
            intervalSeconds > 0 ? `‚è±Ô∏è ${t.timerAdjustmentEnabled}„Äê${intervalSeconds}s„Äë` : `‚è±Ô∏è ${t.timerAdjustmentDisabled}`,
            () => {
                const input = prompt(t.timerPrompt, intervalSeconds.toString());
                const secs = parseInt(input, 10);
                if (!isNaN(secs)) {
                    intervalSeconds = secs;
                    if (intervalSeconds > 0) {
                        watchDOMChanges = false;
                        if (observer) observer.disconnect();
                    } else {
                        if (timer) clearInterval(timer);
                    }
                    saveConfig();
                    updateMenuCommands();
                    location.reload();
                }
            }
        );

        // ÂàáÊç¢ËØ≠Ë®ÄÂäüËÉΩ
        menuHandles.switchLanguage = GM_registerMenuCommand(`üåè ${t.usageLanguage}`, () => {
            const newLanguage = currentLanguage === 'en' ? 'zh' : 'en';
            if (confirm(t.switchLanguageConfirm)) {
                currentLanguage = newLanguage;
                GM_setValue('language', currentLanguage);
                updateMenuCommands();
            }
        });
    }

    // Ê£ÄÊü•ÊòØÂê¶ÊúâÂèØËßÅÊñáÊú¨
    function hasVisibleText(el) {
        return Array.from(el.childNodes).some(node => node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== "");
    }

    // Ê†áËÆ∞ÈªòËÆ§Â≠ó‰ΩìÂ§ßÂ∞è
    function markDefaultFontSize(el) {
        if (el.nodeType !== Node.ELEMENT_NODE) return;

        const style = window.getComputedStyle(el);
        const isVisible = style.display !== "none" && style.visibility !== "hidden";

        if (hasVisibleText(el) && isVisible && !el.hasAttribute('data-default-fontsize')) {
            el.setAttribute('data-default-fontsize', style.fontSize);
        }

        Array.from(el.children).forEach(child => markDefaultFontSize(child));
    }

    // ÊâπÈáèÊõ¥Êñ∞Â≠ó‰ΩìÂ§ßÂ∞è
    function applyFontSizeRecursively(el, increment) {
        if (el.nodeType !== Node.ELEMENT_NODE) return;

        const style = window.getComputedStyle(el);
        const isVisible = style.display !== "none" && style.visibility !== "hidden";

        if (hasVisibleText(el) && isVisible) {
            let currentFontSize = el.style.fontSize || style.fontSize;

            if (!el.hasAttribute('data-default-fontsize')) {
                el.setAttribute('data-default-fontsize', currentFontSize);
            }

            const baseFontSize = parseFloat(convertToPx(el, el.getAttribute('data-default-fontsize')));

            if (!isNaN(baseFontSize)) {
                const newFontSize = baseFontSize + increment;
                el.style.fontSize = `${newFontSize}px`;
            }

            // ËÆæÁΩÆÂ≠ó‰ΩìÁ±ªÂûãÔºåÂè™Êõ¥Êñ∞ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑ fontFamily
            if (currentFontFamily !== 'auto' && currentFontFamily !== 'none' && el.style.fontFamily !== currentFontFamily) {
                el.style.fontFamily = currentFontFamily;
            }
        }

        // Â§ÑÁêÜ iframe ‰∏≠ÁöÑ document.body
        if (el.tagName === 'IFRAME') {
            try {
                const iframeDocument = el.contentDocument || el.contentWindow.document;
                if (iframeDocument) {
                    applyFontSizeRecursively(iframeDocument.body, increment);
                    applyFontFamilyToPage(iframeDocument.body, currentFontFamily);
                }
            } catch (e) {
                console.warn('Êó†Ê≥ïËÆøÈóÆ iframe ÂÜÖÂÆπ', e);
            }
        }

        // ÊîØÊåÅÂ§ÑÁêÜ Shadow DOM ‰∏≠ÁöÑÂ≠ó‰ΩìË∞ÉÊï¥„ÄÇÂ¶ÇÊûúÊúâ shadowRootÔºåÈÄíÂΩíÂ§ÑÁêÜ shadow DOM ‰∏≠ÁöÑÂÖÉÁ¥†
        if (el.shadowRoot) {
            const shadowChildren = el.shadowRoot.querySelectorAll('*');
            shadowChildren.forEach(child => applyFontSizeRecursively(child, increment));
        }

        // ÈÅçÂéÜÂ≠êÂÖÉÁ¥†ÔºåÂºÇÊ≠•Êõ¥Êñ∞Â≠ó‰ΩìÂ§ßÂ∞è
        Array.from(el.children).forEach(child => {
            requestAnimationFrame(() => applyFontSizeRecursively(child, increment));
        });
    }

    // ÊâπÈáèÂ∫îÁî®Â≠ó‰ΩìË∞ÉÊï¥
    function applyFontFamilyToPage(el, fontFamily) {
        if (el.nodeType !== Node.ELEMENT_NODE) return;
        el.style.fontFamily = fontFamily;
        Array.from(el.getElementsByTagName('*')).forEach(child => {
            child.style.fontFamily = fontFamily;
        });

        // ÂØπ iframe ‰∏≠ÁöÑÂÜÖÂÆπÂ∫îÁî®Áõ∏ÂêåÂ≠ó‰Ωì
        if (el.tagName === 'IFRAME') {
            try {
                const iframeDocument = el.contentDocument || el.contentWindow.document;
                if (iframeDocument) {
                    iframeDocument.body.style.fontFamily = fontFamily;
                    Array.from(iframeDocument.body.getElementsByTagName('*')).forEach(child => {
                        child.style.fontFamily = fontFamily;
                    });
                }
            } catch (e) {
                console.warn('Êó†Ê≥ïËÆøÈóÆ iframe ÂÜÖÂÆπ', e);
            }
        }
    }

    // ÈáçÁΩÆÂ≠ó‰ΩìÂ§ßÂ∞è
    function resetFontSize(el) {
        if (el.nodeType !== Node.ELEMENT_NODE) return;

        const defaultSize = el.getAttribute('data-default-fontsize');
        if (defaultSize) {
            el.style.fontSize = defaultSize;
            el.removeAttribute('data-default-fontsize');
        }

        Array.from(el.children).forEach(child => resetFontSize(child));
    }

    // ËΩ¨Êç¢Â≠ó‰ΩìÂçï‰ΩçÔºàÊîØÊåÅ px, em, rem, ptÔºâ
    function convertToPx(el, fontSize) {
        const rootFontSize = parseFloat(window.getComputedStyle(document.documentElement).fontSize);
        if (fontSize.includes("rem")) {
            return parseFloat(fontSize) * rootFontSize;
        }
        if (fontSize.includes("em")) {
            const parentFontSize = parseFloat(window.getComputedStyle(el.parentElement).fontSize);
            return parseFloat(fontSize) * parentFontSize;
        }
        if (fontSize.includes("%")) {
            const parentFontSize = parseFloat(window.getComputedStyle(el.parentElement).fontSize);
            return (parseFloat(fontSize) / 100) * parentFontSize;
        }
        if (fontSize.includes("pt")) {
            // 1pt = 1.3333px
            return parseFloat(fontSize) * 1.3333;
        }
        if (fontSize.includes("vw")) {
            // Ê†πÊçÆËßÜÂè£ÂÆΩÂ∫¶Êù•ËΩ¨Êç¢
            return parseFloat(fontSize) * window.innerWidth / 100;
        }
        if (fontSize.includes("vh")) {
            // Ê†πÊçÆËßÜÂè£È´òÂ∫¶Êù•ËΩ¨Êç¢
            return parseFloat(fontSize) * window.innerHeight / 100;
        }
        return fontSize; // ÈªòËÆ§ËøîÂõû px Âçï‰Ωç
    }

})();
